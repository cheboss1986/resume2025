name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image
        run: |
          IMAGE_REPO="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/resume"
          IMAGE_TAG="${{ github.run_number }}"

          echo "Building image: $IMAGE_REPO:$IMAGE_TAG"

          docker build -t $IMAGE_REPO:$IMAGE_TAG .
          docker push $IMAGE_REPO:$IMAGE_TAG

      - name: Export image URI
        run: echo "IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/resume:${{ github.run_number }}" >> $GITHUB_ENV

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: SSH to EC2 and deploy container
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        script: |
          IMAGE_URI=${{ env.IMAGE_URI }}
          echo "Deploying $IMAGE_URI"

          # Login to ECR using IAM Role (no AWS keys needed)
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
            docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

          # Check if container exists
          CONTAINER_EXISTS=$(docker ps -aq -f name=resume)

          if [ -n "$CONTAINER_EXISTS" ]; then
              echo "Stopping and removing old container..."
              docker rm -f resume
          else
              echo "No existing container found. This is the first deployment."
          fi

          # Run the new container
          docker run -d --name resume -p 8080:5001 $IMAGE_URI

          # Confirm itâ€™s running
          echo "Current running containers:"
          docker ps --filter name=resume
  